name: Deck CI

on:
  pull_request:
  push:
    branches:
      - master
      - release-*

env:
  NODE_VERSION: 10.15.1

jobs:
  purebump:
    name: Ensure package bumps are pure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Ensure package bumps are pure
        run: app/scripts/modules/assert_package_bumps_standalone.sh

  test:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Ensure package bumps are pure
        run: source app/scripts/modules/assert_package_bumps_standalone.sh HEAD^

      - run: echo $PUREBUMP

      - uses: actions/setup-node@v1
        if: env.PUREBUMP != true
        with:
          node-version: ${{ env.NODE_VERSION  }}

      - name: Get yarn cache
        if: env.PUREBUMP != true
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        if: env.PUREBUMP != true
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        if: env.PUREBUMP != true
        run: yarn --frozen-lockfile

      - name: Unit Tests
        if: env.PUREBUMP != true
        run: yarn test --single-run

  build:
    name: Production Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Ensure package bumps are pure
        run: source app/scripts/modules/assert_package_bumps_standalone.sh

      - uses: actions/setup-node@v1
        if: env.PUREBUMP != true
        with:
          node-version: ${{ env.NODE_VERSION  }}

      - name: Get yarn cache
        if: env.PUREBUMP != true
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        if: env.PUREBUMP != true
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        if: env.PUREBUMP != true
        run: yarn --frozen-lockfile

      - name: Yarn Build
        if: env.PUREBUMP != true
        run: yarn build

  packages:
    name: Build Packages
    runs-on: ubuntu-latest

    strategy:
      matrix:
        packages:
          ['core amazon docker titus', 'appengine azure cloudfoundry', 'ecs oracle', 'google huaweicloud kubernetes']

    steps:
      - uses: actions/checkout@v2

      - name: Ensure package bumps are pure
        run: source app/scripts/modules/assert_package_bumps_standalone.sh

      - uses: actions/setup-node@v1
        if: env.PUREBUMP != true
        with:
          node-version: ${{ env.NODE_VERSION  }}

      - name: Get yarn cache
        if: env.PUREBUMP != true
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        if: env.PUREBUMP != true
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies
        if: env.PUREBUMP != true
        run: yarn --frozen-lockfile

      - name: Build NPM Packages
        if: env.PUREBUMP != true
        run: app/scripts/modules/build_modules.sh ${{ matrix.packages }}
